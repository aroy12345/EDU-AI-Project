{"docstore/data": {"93224515-f0ed-4338-a9e7-e9ab461186fa": {"__data__": {"id_": "93224515-f0ed-4338-a9e7-e9ab461186fa", "embedding": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the purpose of the Universal Turing Machine (UTM) in this proof?\n2. How does the proof demonstrate that Lis not recursively enumerable?\n3. What is the definition of M\u2032(k) in this proof?", "section_summary": "\nThis section explains how to prove that the language Lis not recursively enumerable by reducing it from the language ATM. It defines the input for Lis\u27e8M\u2032\u27e9, x, y such that x=w,y=s, where s\u0338=wandsis an input for \u27e8M\u27e9. It then defines M\u2032(k) and proves the validity of the reduction. Finally, it concludes that if \u27e8M\u2032\u27e9, x, y\u2208L, then \u27e8M\u27e9, w\u2208ATM."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "753bf5b4-d583-4bc7-818c-8ca78bb2d22c", "node_type": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf"}, "hash": "3ff35bda3a684da00d65bd905c723c8281b2f9a600ccb9f55fd99d60209fe8cc"}, "3": {"node_id": "6dadc553-fdf6-41ed-b717-2f82f53d7b07", "node_type": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf"}, "hash": "bb07d96ab406d902624fb2950238ec6d450daf88981943d3a81cb2dc77b293ae"}}, "hash": "cedbfc2bea00037835e69bb0262a214f50924c1bdd7b231ca451557ca8171cd1", "text": "CIS 2620 48621473\nHomework 1\nCollaborators: Ethan Yu\nQ1. To prove that Lis not recursively enumerable, we can indeed reduce it from the language ATM. Using the input \u27e8M\u27e9, w\nforATM, we define the input for Las\u27e8M\u2032\u27e9, x, y such that x=w,y=s, where s\u0338=wandsis an input for \u27e8M\u27e9. Let\nus now define \u27e8M\u2032\u27e9.\nDefine M\u2032(k) as follows:\n(a) If kis not equal to w, accept k.\n(b) Otherwise, run the Universal Turing Machine (UTM) on \u27e8M\u27e9andk.\n(c) If the Universal Turing Machine accepts, accept k.\n(d) Otherwise, reject k.\nLet us prove the validity of this reduction:\n\u21d2If\u27e8M\u27e9, w\u2208ATM, then \u27e8M\u2032\u27e9, x, y\u2208L.\nFirst of M\u2032will always accept yas by line 1 y\u0338=w. Let us show that it will not accept x. By definition, since\n\u27e8M\u27e9, w\u2208ATM,Mwill not accept wand also xasx=w. When we feed xinM\u2032, we will go to line 2 as x=w. From\nthere, by defitnton of UTM, the UTM will reject MandxasMdoes not accept x. Therefore, we will go to line 4, and\nreject x. Hence M\u2032will always reject xbut accept y, meaning only one of xoryis accepted, meaning \u27e8M\u2032\u27e9, x, y\u2208L.\n\u21d0If\u27e8M\u2032\u27e9, x, y\u2208L, then \u27e8M\u27e9, w\u2208ATM\nThis means that M\u2032accepted only xor only y.y=sandx=w. Only of those will be accepted. Since y\u0338=w, we", "start_char_idx": 0, "end_char_idx": 1150, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6dadc553-fdf6-41ed-b717-2f82f53d7b07": {"__data__": {"id_": "6dadc553-fdf6-41ed-b717-2f82f53d7b07", "embedding": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. How does the UTM determine whether a given input string is accepted or rejected?\n3. What is the definition of ATM and how does it relate to the proof of non-recursive enumerability of languages?", "section_summary": "\nThis section discusses the proof that a language L is not recursively enumerable if it is reduced from a language ATM which is not recursively enumerable. The proof is done by showing that if a UTM rejects a string w, then the language M does not accept w. This means that the language M' which is reduced from M will accept strings x and y, if and only if M accepts w. Therefore, since ATM is not recursively enumerable, L is not either."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "753bf5b4-d583-4bc7-818c-8ca78bb2d22c", "node_type": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf"}, "hash": "3ff35bda3a684da00d65bd905c723c8281b2f9a600ccb9f55fd99d60209fe8cc"}, "2": {"node_id": "93224515-f0ed-4338-a9e7-e9ab461186fa", "node_type": null, "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf"}, "hash": "cedbfc2bea00037835e69bb0262a214f50924c1bdd7b231ca451557ca8171cd1"}}, "hash": "bb07d96ab406d902624fb2950238ec6d450daf88981943d3a81cb2dc77b293ae", "text": "Only of those will be accepted. Since y\u0338=w, we see\nthatywill always be accepted by M\u2032. This means x=wwill always be rejected. Our only rejection is line 4. We reach\nline 4 through line two where we run the UTM on \u27e8M\u27e9and our input string, in this case x. For our to reach line 4,\nour UTM much have rejected \u27e8M\u27e9, w=x. By definition, this means thats Mdoes not accept w=x. By definition of\nATM, this means that \u27e8M\u27e9, w\u2208ATM\nWe have proved that \u27e8M\u2032\u27e9, x, y\u2208L, iff\u27e8M\u27e9, w\u2208ATMthrough our vald reduction. As ATMis not recursively\nenumerable, this means that Lis not either.", "start_char_idx": 1104, "end_char_idx": 1666, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4e5df7b8-0166-4351-a3fb-74023b5e36c0": {"__data__": {"id_": "4e5df7b8-0166-4351-a3fb-74023b5e36c0", "embedding": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. What is the lecture statement that proves that if Li\u2264LjandLjis recursively enumerable, then Liis also recursively enumerable?\n3. How can a reduction from LtoATM be shown to be valid?", "section_summary": "\nThis section proved that if L is less than or equal to ATM, then L is recursively enumerable. It also proved that if L is recursively enumerable, then L is less than or equal to ATM. This was done by showing that there exists a valid reduction from L to ATM."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "7593f17c-99b4-4971-899c-9aee82002999", "node_type": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf"}, "hash": "9c688d2593652cf7d3a993e830dfb46e9e4c86035462c5b2a180ad86cc45d1f7"}, "3": {"node_id": "07a1402d-3e7b-4519-9580-5c7bf57886ce", "node_type": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf"}, "hash": "a8905c157f79ab0da28d38c539ba3d44ec9154e5834dd1f13f1292ff8bdf9694"}}, "hash": "900798b9048181ca533f740624376c45499a2d641d00ca2616a06c46fa1ead04", "text": "Q2:Q2:Q2:\nProve that L\u2264ATMif and only if L is recursively enumer- able.\n\u2192IfL\u2264ATM, then L is recursively enumerable.\nFrom lecture notes, we know that if Li\u2264LjandLjis recursively enumerable, then Liis also recursively enumerable.\nFrom lecture notes, we know that ATMis recursively enumerable; since L\u2264ATM, this means that L is recursively\nenumerable using the lecture statement we showed earlier.\n\u2190If L is recursively enumerable, then L\u2264ATM, . We know that Lis recursively enumerable so there must ex-\nists a Turing machine Msuch that L(M) = L. Let us define the following reduction from LtoATM. For an input w\nof the Turing Machine MforL, letN=Mandy=w, where \u27e8N\u27e9,yis the input for ATM. Let us show that this is a\nvalid reduction below and L\u2264ATM.\nSUB PROOF: w\u2208L(Maccepts w) iff\u27e8N\u27e9,y\u2208ATM SUB PROOF: w\u2208L(Maccepts w) iff\u27e8N\u27e9,y\u2208ATM SUB PROOF: w\u2208L(Maccepts w) iff\u27e8N\u27e9,y\u2208ATM\n\u2192Ifw\u2208L(Maccepts w), then \u27e8N\u27e9,y\u2208ATMN=Mandy=w.\nSince, Maccepts wthis also means that Naccepts y. Hence, \u27e8N\u27e9,y\u2208ATM.\n\u2190If\u27e8N\u27e9,y\u2208ATM, then w\u2208L(Maccepts w). Since \u27e8N\u27e9,y\u2208ATM, this means that Naccepts y, Since N=Mand\ny=w, this also means Maccepts wand so w\u2208L.\nTherefore our reduction", "start_char_idx": 0, "end_char_idx": 1138, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "07a1402d-3e7b-4519-9580-5c7bf57886ce": {"__data__": {"id_": "07a1402d-3e7b-4519-9580-5c7bf57886ce", "embedding": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. How can the reduction of a language to automata theory be validated?\n3. What is the significance of Maccepts wand in the proof of non-recursive enumerability of languages from automata theory?", "section_summary": "\n\nThe section discusses the concept of reduction in the context of language acceptance, specifically the reduction of a language L to the language ATM. It is shown that if Maccepts wand so w\u2208L, then the reduction is valid, meaning that L\u2264ATM."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "7593f17c-99b4-4971-899c-9aee82002999", "node_type": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf"}, "hash": "9c688d2593652cf7d3a993e830dfb46e9e4c86035462c5b2a180ad86cc45d1f7"}, "2": {"node_id": "4e5df7b8-0166-4351-a3fb-74023b5e36c0", "node_type": null, "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf"}, "hash": "900798b9048181ca533f740624376c45499a2d641d00ca2616a06c46fa1ead04"}}, "hash": "a8905c157f79ab0da28d38c539ba3d44ec9154e5834dd1f13f1292ff8bdf9694", "text": "this also means Maccepts wand so w\u2208L.\nTherefore our reduction is valid, meaning L\u2264ATM.\n48621473 2 Homework 1", "start_char_idx": 1077, "end_char_idx": 1185, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "86c47ad0-e362-4e8a-ad4d-cc4ca168b138": {"__data__": {"id_": "86c47ad0-e362-4e8a-ad4d-cc4ca168b138", "embedding": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the input for Lp?\n2. How is the language of L(M0) and L(M\u2032) identical?\n3. What is the purpose of the universal turing machine UTMon\u27e8M\u27e9,w?", "section_summary": "\nThis section discusses how to prove that a language Lp is not recursively enumerable by reducing it from the language ATM. The input for Lp is defined as \u27e8M\u2032\u27e9, using the input \u27e8M\u27e9, w for ATM. The validity of this reduction is then proven by showing that if \u27e8M\u27e9, w\u2208ATM, then \u27e8M\u2032\u27e9 \u2208Lp, and if \u27e8M\u2032\u27e9 \u2208Lp, then \u27e8M\u27e9, w\u2208ATM."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "94372b21-4912-4dde-a939-1847faa2a224", "node_type": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf"}, "hash": "5b720dce2c8d8f5c5d6066dfbbb8e649334eeb96487e004ab0e95f91811eb2b7"}, "3": {"node_id": "e9c15bab-9607-4dfa-9f82-ba0d8f0af87d", "node_type": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf"}, "hash": "13ae3d3e2533e69a2fff34b50771fb323bcbe00df1a52de5cd366237117722b8"}}, "hash": "c80557ff7910653e6cd14744ac4a593a3b04694fecaac5343061557f1d1c47ad", "text": "Q3: To prove that Lpis not recursively enumerable, we can reduce it from the language ATM. We define the input for\nLpas\u27e8M\u2032\u27e9, using the input \u27e8M\u27e9, wforATM. Now, let us define M\u2032(k) as follows:\nDefine M\u2032(k) as follows: For input string k\ni. Run the universal turing machine UTMon\u27e8M\u27e9,w.\nii. If UTMaccepts, then reject k\niii. If not, run UTMon\u27e8M0\u27e9, s\niv. If UTMaccepts \u27e8M0\u27e9, s, accept k\nv. If not, reject k\nLet us prove the validity of this reduction:\n\u2192If\u27e8M\u27e9, w\u2208ATM, then \u27e8M\u2032\u27e9 \u2208Lp.\nSince\u27e8M\u27e9, w\u2208ATM,Mrejects w. This means that UTMrejects \u27e8M\u27e9,w. This means that we go to lines 3-5.\nNote that for every x, that M0accepts, M\u2032will also accept as UTM will accept \u27e8M0\u27e9, xby definition. Likewise, for\nevery z, that M0doesn\u2019t accept, M\u2032will not accept either as UTM will not accept \u27e8M0\u27e9, zby definition. As such,\nthe langauge of L(M0) and L(M\u2032) are identical and since L(M0)\u2208P, then L(M\u2032)\u2208P, meaning that \u27e8M\u2032\u27e9 \u2208P\n\u2192If\u27e8M\u2032\u27e9 \u2208Lp, then \u27e8M\u27e9, w\u2208ATM\nSuppose for the sake of contradiction that \u27e8M\u27e9, w /\u2208ATM. As such, Maccepts w, meaning UTM will also accept\n\u27e8M\u27e9, w, meaning our M\u2032will always be in", "start_char_idx": 0, "end_char_idx": 1075, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e9c15bab-9607-4dfa-9f82-ba0d8f0af87d": {"__data__": {"id_": "e9c15bab-9607-4dfa-9f82-ba0d8f0af87d", "embedding": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. How can a valid reduction be used to prove that a language is not recursively enumerable?\n3. What is the relationship between automata theory and languages that are not recursively enumerable?", "section_summary": "\nThis section proves that the language Lp is not recursively enumerable by showing that the language ATM is not recursively enumerable. It does this by constructing a machine M' that rejects every string, and showing that if Lp were recursively enumerable, then M' would be in Lp, which is a contradiction."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "94372b21-4912-4dde-a939-1847faa2a224", "node_type": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf"}, "hash": "5b720dce2c8d8f5c5d6066dfbbb8e649334eeb96487e004ab0e95f91811eb2b7"}, "2": {"node_id": "86c47ad0-e362-4e8a-ad4d-cc4ca168b138", "node_type": null, "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf"}, "hash": "c80557ff7910653e6cd14744ac4a593a3b04694fecaac5343061557f1d1c47ad"}}, "hash": "13ae3d3e2533e69a2fff34b50771fb323bcbe00df1a52de5cd366237117722b8", "text": "accept\n\u27e8M\u27e9, w, meaning our M\u2032will always be in line 2 and reject every string. Thus, L(M\u2032) is the empty set, which\nis a finite subset of L(M0). As such, L(M\u2032) does not have the property P, meaning, \u27e8M\u2032\u27e9/\u2208Lp, which is a\ncontradiction.\nWe have proved that \u27e8M\u27e9, w\u2208ATMiff\u27e8M\u2032\u27e9 \u2208Lpthrough our vald reduction. As ATMis not recursively\nenumerable, this means that Lpis not either.\n48621473 3 Homework 1", "start_char_idx": 1029, "end_char_idx": 1423, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b347fed9-722b-455c-876b-98b26d2e125c": {"__data__": {"id_": "b347fed9-722b-455c-876b-98b26d2e125c", "embedding": null, "metadata": {"page_label": "4", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. How does automata theory provide a proof of non-recursive enumerability of languages?\n3. What are the implications of non-recursive enumerability of languages from automata theory?", "section_summary": "\n\nThis section discusses the 48621473 4 Homework assignment, which focuses on the topics of problem solving, data analysis, and programming. It also mentions the use of various tools such as Python, R, and Excel to complete the assignment."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": ["questions_this_excerpt_can_answer"], "relationships": {"1": {"node_id": "f6d44c6b-d595-493b-807f-8d2093373157", "node_type": null, "metadata": {"page_label": "4", "file_name": "uploaded_pdf.pdf"}, "hash": "db5c6438dd6dda5795c63e7999685507c37d1f1c2d73fe0d0ddf1fc02a1bab7c"}}, "hash": "db5c6438dd6dda5795c63e7999685507c37d1f1c2d73fe0d0ddf1fc02a1bab7c", "text": "48621473 4 Homework 1", "start_char_idx": 0, "end_char_idx": 21, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"753bf5b4-d583-4bc7-818c-8ca78bb2d22c": {"node_ids": ["93224515-f0ed-4338-a9e7-e9ab461186fa", "6dadc553-fdf6-41ed-b717-2f82f53d7b07"], "metadata": {"page_label": "1", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the purpose of the Universal Turing Machine (UTM) in this proof?\n2. How does the proof demonstrate that Lis not recursively enumerable?\n3. What is the definition of M\u2032(k) in this proof?", "section_summary": "\nThis section explains how to prove that the language Lis not recursively enumerable by reducing it from the language ATM. It defines the input for Lis\u27e8M\u2032\u27e9, x, y such that x=w,y=s, where s\u0338=wandsis an input for \u27e8M\u27e9. It then defines M\u2032(k) and proves the validity of the reduction. Finally, it concludes that if \u27e8M\u2032\u27e9, x, y\u2208L, then \u27e8M\u27e9, w\u2208ATM."}}, "7593f17c-99b4-4971-899c-9aee82002999": {"node_ids": ["4e5df7b8-0166-4351-a3fb-74023b5e36c0", "07a1402d-3e7b-4519-9580-5c7bf57886ce"], "metadata": {"page_label": "2", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. What is the lecture statement that proves that if Li\u2264LjandLjis recursively enumerable, then Liis also recursively enumerable?\n3. How can a reduction from LtoATM be shown to be valid?", "section_summary": "\nThis section proved that if L is less than or equal to ATM, then L is recursively enumerable. It also proved that if L is recursively enumerable, then L is less than or equal to ATM. This was done by showing that there exists a valid reduction from L to ATM."}}, "94372b21-4912-4dde-a939-1847faa2a224": {"node_ids": ["86c47ad0-e362-4e8a-ad4d-cc4ca168b138", "e9c15bab-9607-4dfa-9f82-ba0d8f0af87d"], "metadata": {"page_label": "3", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the input for Lp?\n2. How is the language of L(M0) and L(M\u2032) identical?\n3. What is the purpose of the universal turing machine UTMon\u27e8M\u27e9,w?", "section_summary": "\nThis section discusses how to prove that a language Lp is not recursively enumerable by reducing it from the language ATM. The input for Lp is defined as \u27e8M\u2032\u27e9, using the input \u27e8M\u27e9, w for ATM. The validity of this reduction is then proven by showing that if \u27e8M\u27e9, w\u2208ATM, then \u27e8M\u2032\u27e9 \u2208Lp, and if \u27e8M\u2032\u27e9 \u2208Lp, then \u27e8M\u27e9, w\u2208ATM."}}, "f6d44c6b-d595-493b-807f-8d2093373157": {"node_ids": ["b347fed9-722b-455c-876b-98b26d2e125c"], "metadata": {"page_label": "4", "file_name": "uploaded_pdf.pdf", "document_title": "Proof of Non-Recursive Enumerability of Languages from Automata Theory.", "questions_this_excerpt_can_answer": "\n\n1. What is the proof of non-recursive enumerability of languages from automata theory?\n2. How does automata theory provide a proof of non-recursive enumerability of languages?\n3. What are the implications of non-recursive enumerability of languages from automata theory?", "section_summary": "\n\nThis section discusses the 48621473 4 Homework assignment, which focuses on the topics of problem solving, data analysis, and programming. It also mentions the use of various tools such as Python, R, and Excel to complete the assignment."}}}, "docstore/metadata": {"93224515-f0ed-4338-a9e7-e9ab461186fa": {"doc_hash": "cedbfc2bea00037835e69bb0262a214f50924c1bdd7b231ca451557ca8171cd1", "ref_doc_id": "753bf5b4-d583-4bc7-818c-8ca78bb2d22c"}, "6dadc553-fdf6-41ed-b717-2f82f53d7b07": {"doc_hash": "bb07d96ab406d902624fb2950238ec6d450daf88981943d3a81cb2dc77b293ae", "ref_doc_id": "753bf5b4-d583-4bc7-818c-8ca78bb2d22c"}, "4e5df7b8-0166-4351-a3fb-74023b5e36c0": {"doc_hash": "900798b9048181ca533f740624376c45499a2d641d00ca2616a06c46fa1ead04", "ref_doc_id": "7593f17c-99b4-4971-899c-9aee82002999"}, "07a1402d-3e7b-4519-9580-5c7bf57886ce": {"doc_hash": "a8905c157f79ab0da28d38c539ba3d44ec9154e5834dd1f13f1292ff8bdf9694", "ref_doc_id": "7593f17c-99b4-4971-899c-9aee82002999"}, "86c47ad0-e362-4e8a-ad4d-cc4ca168b138": {"doc_hash": "c80557ff7910653e6cd14744ac4a593a3b04694fecaac5343061557f1d1c47ad", "ref_doc_id": "94372b21-4912-4dde-a939-1847faa2a224"}, "e9c15bab-9607-4dfa-9f82-ba0d8f0af87d": {"doc_hash": "13ae3d3e2533e69a2fff34b50771fb323bcbe00df1a52de5cd366237117722b8", "ref_doc_id": "94372b21-4912-4dde-a939-1847faa2a224"}, "b347fed9-722b-455c-876b-98b26d2e125c": {"doc_hash": "db5c6438dd6dda5795c63e7999685507c37d1f1c2d73fe0d0ddf1fc02a1bab7c", "ref_doc_id": "f6d44c6b-d595-493b-807f-8d2093373157"}}}